# PostgreSQL 17 Windows Production Configuration
# Optimized for Odoo 17 with 50 concurrent users
# Windows Server specific optimizations

# ====================================
# CONNECTION SETTINGS
# ====================================
listen_addresses = '*'
port = 5432
max_connections = 100                    # 50 users + 10 Odoo workers + overhead
superuser_reserved_connections = 3

# ====================================
# MEMORY CONFIGURATION (Windows Optimized)
# ====================================
# Assuming 64GB RAM server, PostgreSQL gets ~16GB
shared_buffers = 4GB                     # 25% of dedicated PostgreSQL memory
work_mem = 32MB                          # For complex queries and sorts
maintenance_work_mem = 512MB             # For VACUUM, CREATE INDEX, etc.
effective_cache_size = 12GB              # Windows file cache estimate
temp_buffers = 32MB                      # Temporary table cache

# ====================================
# WINDOWS-SPECIFIC OPTIMIZATIONS
# ====================================
dynamic_shared_memory_type = windows     # Windows shared memory
huge_pages = off                         # Not applicable on Windows
max_files_per_process = 1000             # Windows file handle limit

# ====================================
# WRITE-AHEAD LOGGING (Production Grade)
# ====================================
wal_level = replica                      # Support for replication
fsync = on                              # Critical for data safety
synchronous_commit = on                  # Ensure transaction durability
wal_sync_method = fsync                 # Windows fsync method
full_page_writes = on                   # Protection against partial writes
wal_compression = on                    # Compress WAL records
wal_buffers = 64MB                      # WAL buffer size
wal_writer_delay = 200ms                # WAL writer frequency

# WAL file management
max_wal_size = 4GB                      # Maximum WAL size before checkpoint
min_wal_size = 1GB                      # Minimum WAL size to maintain
checkpoint_completion_target = 0.9       # Spread checkpoint I/O

# ====================================
# QUERY PLANNER (SSD Optimized)
# ====================================
random_page_cost = 1.1                  # SSD storage assumption
seq_page_cost = 1.0                     # Sequential read cost
effective_io_concurrency = 200          # SSD concurrent I/O capability
max_worker_processes = 8                # Background worker processes
max_parallel_workers = 4                # Parallel query workers
max_parallel_workers_per_gather = 2     # Workers per parallel query
max_parallel_maintenance_workers = 2    # Parallel maintenance workers

# ====================================
# LOGGING CONFIGURATION
# ====================================
log_destination = 'stderr'              # Log to standard error
logging_collector = on                  # Enable log collection
log_directory = 'log'                   # Log directory (relative to data)
log_filename = 'postgresql-%Y-%m-%d_%H%M%S.log'
log_file_mode = 0600                    # Log file permissions
log_rotation_age = 1d                   # Rotate logs daily
log_rotation_size = 100MB               # Rotate when log reaches 100MB
log_truncate_on_rotation = off          # Don't truncate logs

# What to log
log_min_messages = warning              # Minimum message level
log_min_error_statement = error         # Log statements causing errors
log_min_duration_statement = 1000      # Log slow queries (>1s)
log_checkpoints = on                    # Log checkpoint activity
log_connections = off                   # Don't log connections (noise)
log_disconnections = off                # Don't log disconnections
log_lock_waits = on                     # Log lock waits for debugging
log_statement = 'none'                  # Don't log all statements
log_temp_files = 10MB                   # Log temp files >10MB

# Log format
log_line_prefix = '%t [%p]: [%l-1] user=%u,db=%d,app=%a,client=%h '
log_timezone = 'UTC'

# ====================================
# RUNTIME STATISTICS
# ====================================
track_activities = on                   # Track running commands
track_activity_query_size = 2048        # Query text size in pg_stat_activity
track_counts = on                       # Track table/index access stats
track_functions = all                   # Track function call stats
track_io_timing = on                    # Track I/O timing statistics
stats_temp_directory = 'pg_stat_tmp'    # Temporary stats directory

# ====================================
# AUTOVACUUM (Tuned for Odoo)
# ====================================
autovacuum = on                         # Enable autovacuum
autovacuum_naptime = 30s                # Run autovacuum every 30 seconds
autovacuum_max_workers = 3              # Maximum autovacuum workers
autovacuum_vacuum_threshold = 50        # Min number of updated/deleted rows
autovacuum_vacuum_scale_factor = 0.1    # Fraction of table size for vacuum
autovacuum_analyze_threshold = 50       # Min number of inserted/updated rows
autovacuum_analyze_scale_factor = 0.05  # Fraction of table size for analyze
autovacuum_vacuum_cost_delay = 10ms     # Vacuum cost delay
autovacuum_vacuum_cost_limit = 1000     # Vacuum cost limit

# ====================================
# CLIENT CONNECTION DEFAULTS
# ====================================
default_transaction_isolation = 'read committed'
timezone = 'UTC'
lc_messages = 'English_United States.1252'      # Windows locale
lc_monetary = 'English_United States.1252'
lc_numeric = 'English_United States.1252'
lc_time = 'English_United States.1252'
default_text_search_config = 'pg_catalog.english'

# ====================================
# LOCK MANAGEMENT
# ====================================
deadlock_timeout = 1s                  # Time to wait before checking deadlock
max_locks_per_transaction = 256         # Locks per transaction
max_pred_locks_per_transaction = 64     # Predicate locks per transaction
max_pred_locks_per_relation = -2        # Per-relation predicate locks
max_pred_locks_per_page = 2             # Per-page predicate locks

# ====================================
# ERROR HANDLING
# ====================================
exit_on_error = off                     # Don't exit on error
restart_after_crash = on               # Restart after crash

# ====================================
# BACKGROUND WRITER
# ====================================
bgwriter_delay = 100ms                 # Background writer sleep time
bgwriter_lru_maxpages = 300            # Max pages written per round
bgwriter_lru_multiplier = 4.0          # Multiplier for next round
bgwriter_flush_after = 512kB           # Flush after this much data

# ====================================
# STATEMENT STATISTICS (Performance Monitoring)
# ====================================
shared_preload_libraries = 'pg_stat_statements'
pg_stat_statements.max = 10000          # Maximum number of statements tracked
pg_stat_statements.track = all          # Track all statements
pg_stat_statements.track_utility = on   # Track utility commands
pg_stat_statements.save = on            # Save stats across restarts

# ====================================
# CONNECTION POOLING OPTIMIZATION
# ====================================
tcp_keepalives_idle = 600               # Time before sending keepalives
tcp_keepalives_interval = 30            # Interval between keepalives
tcp_keepalives_count = 3                # Number of keepalives before timeout

# ====================================
# WINDOWS-SPECIFIC PERFORMANCE
# ====================================
# Windows memory management
max_stack_depth = 2MB                   # Maximum stack depth
shared_memory_type = mmap               # Shared memory implementation

# ====================================
# REPLICATION SETTINGS (Future Proofing)
# ====================================
max_wal_senders = 3                     # Max replication connections
max_replication_slots = 3               # Max replication slots
wal_keep_size = 1GB                     # Keep this much WAL for replication

# ====================================
# ARCHIVING (Disabled by default)
# ====================================
archive_mode = off                      # Disable archiving initially
archive_command = ''                    # Archive command

# ====================================
# EXTENSIONS AND MODULES
# ====================================
# Common extensions for Odoo
# Enable these in PostgreSQL if needed:
# CREATE EXTENSION IF NOT EXISTS "unaccent";
# CREATE EXTENSION IF NOT EXISTS "pg_trgm";
# CREATE EXTENSION IF NOT EXISTS "btree_gin";
# CREATE EXTENSION IF NOT EXISTS "btree_gist";

# ====================================
# VACUUM AND ANALYZE SETTINGS
# ====================================
vacuum_cost_delay = 0                   # No delay for manual vacuum
vacuum_cost_page_hit = 1                # Cost for page in buffer
vacuum_cost_page_miss = 10              # Cost for page not in buffer
vacuum_cost_page_dirty = 20             # Cost for dirty page
vacuum_cost_limit = 200                 # Cost limit before delay

# ====================================
# BACKUP AND RECOVERY
# ====================================
archive_timeout = 0                     # Disabled
recovery_target_timeline = 'latest'     # Recovery target

# ====================================
# MAINTENANCE
# ====================================
# Regular maintenance commands to run:
# VACUUM ANALYZE;  -- Weekly
# REINDEX;         -- Monthly
# UPDATE pg_stat_statements SET calls=0, total_time=0; -- Reset stats monthly

# ====================================
# PERFORMANCE TUNING NOTES
# ====================================
# For optimal performance with Odoo 17:
# 1. Ensure PostgreSQL service runs as high priority
# 2. Configure Windows for performance over appearance
# 3. Use SSD storage for data directory
# 4. Monitor with scripts/monitor.bat
# 5. Regular maintenance with scripts/backup.bat
# 6. Tune based on actual usage patterns

# ====================================
# SECURITY NOTES
# ====================================
# 1. Use pg_hba.conf to restrict connections
# 2. Set strong passwords for all users
# 3. Consider SSL for remote connections
# 4. Regular security updates
# 5. Monitor failed login attempts